!function(n){var r={};function t(e){if(r[e])return r[e].exports;var o=r[e]={i:e,l:!1,exports:{}};return n[e].call(o.exports,o,o.exports,t),o.l=!0,o.exports}t.m=n,t.c=r,t.d=function(n,r,e){t.o(n,r)||Object.defineProperty(n,r,{enumerable:!0,get:e})},t.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},t.t=function(n,r){if(1&r&&(n=t(n)),8&r)return n;if(4&r&&"object"==typeof n&&n&&n.__esModule)return n;var e=Object.create(null);if(t.r(e),Object.defineProperty(e,"default",{enumerable:!0,value:n}),2&r&&"string"!=typeof n)for(var o in n)t.d(e,o,function(r){return n[r]}.bind(null,o));return e},t.n=function(n){var r=n&&n.__esModule?function(){return n.default}:function(){return n};return t.d(r,"a",r),r},t.o=function(n,r){return Object.prototype.hasOwnProperty.call(n,r)},t.p="",t(t.s=8)}([function(n,r,t){"use strict";var e,o=function(){return void 0===e&&(e=Boolean(window&&document&&document.all&&!window.atob)),e},a=function(){var n={};return function(r){if(void 0===n[r]){var t=document.querySelector(r);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}n[r]=t}return n[r]}}(),i=[];function c(n){for(var r=-1,t=0;t<i.length;t++)if(i[t].identifier===n){r=t;break}return r}function u(n,r){for(var t={},e=[],o=0;o<n.length;o++){var a=n[o],u=r.base?a[0]+r.base:a[0],s=t[u]||0,l="".concat(u," ").concat(s);t[u]=s+1;var p=c(l),f={css:a[1],media:a[2],sourceMap:a[3]};-1!==p?(i[p].references++,i[p].updater(f)):i.push({identifier:l,updater:v(f,r),references:1}),e.push(l)}return e}function s(n){var r=document.createElement("style"),e=n.attributes||{};if(void 0===e.nonce){var o=t.nc;o&&(e.nonce=o)}if(Object.keys(e).forEach((function(n){r.setAttribute(n,e[n])})),"function"==typeof n.insert)n.insert(r);else{var i=a(n.insert||"head");if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(r)}return r}var l,p=(l=[],function(n,r){return l[n]=r,l.filter(Boolean).join("\n")});function f(n,r,t,e){var o=t?"":e.media?"@media ".concat(e.media," {").concat(e.css,"}"):e.css;if(n.styleSheet)n.styleSheet.cssText=p(r,o);else{var a=document.createTextNode(o),i=n.childNodes;i[r]&&n.removeChild(i[r]),i.length?n.insertBefore(a,i[r]):n.appendChild(a)}}function d(n,r,t){var e=t.css,o=t.media,a=t.sourceMap;if(o?n.setAttribute("media",o):n.removeAttribute("media"),a&&btoa&&(e+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}var h=null,m=0;function v(n,r){var t,e,o;if(r.singleton){var a=m++;t=h||(h=s(r)),e=f.bind(null,t,a,!1),o=f.bind(null,t,a,!0)}else t=s(r),e=d.bind(null,t,r),o=function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(t)};return e(n),function(r){if(r){if(r.css===n.css&&r.media===n.media&&r.sourceMap===n.sourceMap)return;e(n=r)}else o()}}n.exports=function(n,r){(r=r||{}).singleton||"boolean"==typeof r.singleton||(r.singleton=o());var t=u(n=n||[],r);return function(n){if(n=n||[],"[object Array]"===Object.prototype.toString.call(n)){for(var e=0;e<t.length;e++){var o=c(t[e]);i[o].references--}for(var a=u(n,r),s=0;s<t.length;s++){var l=c(t[s]);0===i[l].references&&(i[l].updater(),i.splice(l,1))}t=a}}}},function(n,r,t){"use strict";n.exports=function(n){var r=[];return r.toString=function(){return this.map((function(r){var t=function(n,r){var t=n[1]||"",e=n[3];if(!e)return t;if(r&&"function"==typeof btoa){var o=(i=e,c=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),u="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(c),"/*# ".concat(u," */")),a=e.sources.map((function(n){return"/*# sourceURL=".concat(e.sourceRoot||"").concat(n," */")}));return[t].concat(a).concat([o]).join("\n")}var i,c,u;return[t].join("\n")}(r,n);return r[2]?"@media ".concat(r[2]," {").concat(t,"}"):t})).join("")},r.i=function(n,t,e){"string"==typeof n&&(n=[[null,n,""]]);var o={};if(e)for(var a=0;a<this.length;a++){var i=this[a][0];null!=i&&(o[i]=!0)}for(var c=0;c<n.length;c++){var u=[].concat(n[c]);e&&o[u[0]]||(t&&(u[2]?u[2]="".concat(t," and ").concat(u[2]):u[2]=t),r.push(u))}},r}},function(n,r,t){(function(n){function r(n){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n})(n)}var t=function(n){"use strict";var t=Object.prototype,e=t.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},a=o.iterator||"@@iterator",i=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag";function u(n,r,t){return Object.defineProperty(n,r,{value:t,enumerable:!0,configurable:!0,writable:!0}),n[r]}try{u({},"")}catch(n){u=function(n,r,t){return n[r]=t}}function s(n,r,t,e){var o=r&&r.prototype instanceof f?r:f,a=Object.create(o.prototype),i=new E(e||[]);return a._invoke=function(n,r,t){var e="suspendedStart";return function(o,a){if("executing"===e)throw new Error("Generator is already running");if("completed"===e){if("throw"===o)throw a;return S()}for(t.method=o,t.arg=a;;){var i=t.delegate;if(i){var c=x(i,t);if(c){if(c===p)continue;return c}}if("next"===t.method)t.sent=t._sent=t.arg;else if("throw"===t.method){if("suspendedStart"===e)throw e="completed",t.arg;t.dispatchException(t.arg)}else"return"===t.method&&t.abrupt("return",t.arg);e="executing";var u=l(n,r,t);if("normal"===u.type){if(e=t.done?"completed":"suspendedYield",u.arg===p)continue;return{value:u.arg,done:t.done}}"throw"===u.type&&(e="completed",t.method="throw",t.arg=u.arg)}}}(n,t,i),a}function l(n,r,t){try{return{type:"normal",arg:n.call(r,t)}}catch(n){return{type:"throw",arg:n}}}n.wrap=s;var p={};function f(){}function d(){}function h(){}var m={};m[a]=function(){return this};var v=Object.getPrototypeOf,g=v&&v(v(R([])));g&&g!==t&&e.call(g,a)&&(m=g);var b=h.prototype=f.prototype=Object.create(m);function y(n){["next","throw","return"].forEach((function(r){u(n,r,(function(n){return this._invoke(r,n)}))}))}function w(n,t){var o;this._invoke=function(a,i){function c(){return new t((function(o,c){!function o(a,i,c,u){var s=l(n[a],n,i);if("throw"!==s.type){var p=s.arg,f=p.value;return f&&"object"===r(f)&&e.call(f,"__await")?t.resolve(f.__await).then((function(n){o("next",n,c,u)}),(function(n){o("throw",n,c,u)})):t.resolve(f).then((function(n){p.value=n,c(p)}),(function(n){return o("throw",n,c,u)}))}u(s.arg)}(a,i,o,c)}))}return o=o?o.then(c,c):c()}}function x(n,r){var t=n.iterator[r.method];if(void 0===t){if(r.delegate=null,"throw"===r.method){if(n.iterator.return&&(r.method="return",r.arg=void 0,x(n,r),"throw"===r.method))return p;r.method="throw",r.arg=new TypeError("The iterator does not provide a 'throw' method")}return p}var e=l(t,n.iterator,r.arg);if("throw"===e.type)return r.method="throw",r.arg=e.arg,r.delegate=null,p;var o=e.arg;return o?o.done?(r[n.resultName]=o.value,r.next=n.nextLoc,"return"!==r.method&&(r.method="next",r.arg=void 0),r.delegate=null,p):o:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,p)}function _(n){var r={tryLoc:n[0]};1 in n&&(r.catchLoc=n[1]),2 in n&&(r.finallyLoc=n[2],r.afterLoc=n[3]),this.tryEntries.push(r)}function k(n){var r=n.completion||{};r.type="normal",delete r.arg,n.completion=r}function E(n){this.tryEntries=[{tryLoc:"root"}],n.forEach(_,this),this.reset(!0)}function R(n){if(n){var r=n[a];if(r)return r.call(n);if("function"==typeof n.next)return n;if(!isNaN(n.length)){var t=-1,o=function r(){for(;++t<n.length;)if(e.call(n,t))return r.value=n[t],r.done=!1,r;return r.value=void 0,r.done=!0,r};return o.next=o}}return{next:S}}function S(){return{value:void 0,done:!0}}return d.prototype=b.constructor=h,h.constructor=d,d.displayName=u(h,c,"GeneratorFunction"),n.isGeneratorFunction=function(n){var r="function"==typeof n&&n.constructor;return!!r&&(r===d||"GeneratorFunction"===(r.displayName||r.name))},n.mark=function(n){return Object.setPrototypeOf?Object.setPrototypeOf(n,h):(n.__proto__=h,u(n,c,"GeneratorFunction")),n.prototype=Object.create(b),n},n.awrap=function(n){return{__await:n}},y(w.prototype),w.prototype[i]=function(){return this},n.AsyncIterator=w,n.async=function(r,t,e,o,a){void 0===a&&(a=Promise);var i=new w(s(r,t,e,o),a);return n.isGeneratorFunction(t)?i:i.next().then((function(n){return n.done?n.value:i.next()}))},y(b),u(b,c,"Generator"),b[a]=function(){return this},b.toString=function(){return"[object Generator]"},n.keys=function(n){var r=[];for(var t in n)r.push(t);return r.reverse(),function t(){for(;r.length;){var e=r.pop();if(e in n)return t.value=e,t.done=!1,t}return t.done=!0,t}},n.values=R,E.prototype={constructor:E,reset:function(n){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(k),!n)for(var r in this)"t"===r.charAt(0)&&e.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=void 0)},stop:function(){this.done=!0;var n=this.tryEntries[0].completion;if("throw"===n.type)throw n.arg;return this.rval},dispatchException:function(n){if(this.done)throw n;var r=this;function t(t,e){return i.type="throw",i.arg=n,r.next=t,e&&(r.method="next",r.arg=void 0),!!e}for(var o=this.tryEntries.length-1;o>=0;--o){var a=this.tryEntries[o],i=a.completion;if("root"===a.tryLoc)return t("end");if(a.tryLoc<=this.prev){var c=e.call(a,"catchLoc"),u=e.call(a,"finallyLoc");if(c&&u){if(this.prev<a.catchLoc)return t(a.catchLoc,!0);if(this.prev<a.finallyLoc)return t(a.finallyLoc)}else if(c){if(this.prev<a.catchLoc)return t(a.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return t(a.finallyLoc)}}}},abrupt:function(n,r){for(var t=this.tryEntries.length-1;t>=0;--t){var o=this.tryEntries[t];if(o.tryLoc<=this.prev&&e.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===n||"continue"===n)&&a.tryLoc<=r&&r<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=n,i.arg=r,a?(this.method="next",this.next=a.finallyLoc,p):this.complete(i)},complete:function(n,r){if("throw"===n.type)throw n.arg;return"break"===n.type||"continue"===n.type?this.next=n.arg:"return"===n.type?(this.rval=this.arg=n.arg,this.method="return",this.next="end"):"normal"===n.type&&r&&(this.next=r),p},finish:function(n){for(var r=this.tryEntries.length-1;r>=0;--r){var t=this.tryEntries[r];if(t.finallyLoc===n)return this.complete(t.completion,t.afterLoc),k(t),p}},catch:function(n){for(var r=this.tryEntries.length-1;r>=0;--r){var t=this.tryEntries[r];if(t.tryLoc===n){var e=t.completion;if("throw"===e.type){var o=e.arg;k(t)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(n,r,t){return this.delegate={iterator:R(n),resultName:r,nextLoc:t},"next"===this.method&&(this.arg=void 0),p}},n}("object"===r(n)?n.exports:{});try{regeneratorRuntime=t}catch(n){Function("r","regeneratorRuntime = r")(t)}}).call(this,t(3)(n))},function(n,r){n.exports=function(n){return n.webpackPolyfill||(n.deprecate=function(){},n.paths=[],n.children||(n.children=[]),Object.defineProperty(n,"loaded",{enumerable:!0,get:function(){return n.l}}),Object.defineProperty(n,"id",{enumerable:!0,get:function(){return n.i}}),n.webpackPolyfill=1),n}},function(n,r,t){var e=t(0),o=t(5);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[n.i,o,""]]);var a={insert:"head",singleton:!1};e(o,a);n.exports=o.locals||{}},function(n,r,t){(r=t(1)(!1)).push([n.i,"* {\r\n    box-sizing: border-box;\r\n    margin: 0;\r\n    padding: 0;\r\n}\r\n\r\n\r\n\r\nbody {\r\n    font-family: 'Karma',sans-serif;\r\n    background-color: white;\r\n    min-height: 100vh;\r\n    display: flex;\r\n    flex-direction: column;\r\n}\r\n/* loader */\r\n.loader {\r\n    border: 16px solid #f3f3f3;\r\n    border-radius: 50%;\r\n    border-top: 16px solid #3498db;\r\n    width: 120px;\r\n    height: 120px;\r\n    -webkit-animation: spin 2s linear infinite; /* Safari */\r\n    animation: spin 2s linear infinite;\r\n  }\r\n  \r\n  @-webkit-keyframes spin {\r\n    0% { -webkit-transform: rotate(0deg); }\r\n    100% { -webkit-transform: rotate(360deg); }\r\n  }\r\n  \r\n  @keyframes spin {\r\n    0% { transform: rotate(0deg); }\r\n    100% { transform: rotate(360deg); }\r\n  }\r\n  \r\n  /* Add animation to \"page content\" */\r\n  .animate-bottom {\r\n    position: relative;\r\n    -webkit-animation-name: animatebottom;\r\n    -webkit-animation-duration: 1s;\r\n    animation-name: animatebottom;\r\n    animation-duration: 1s\r\n  }\r\n  \r\n  @-webkit-keyframes animatebottom {\r\n    from { bottom:-100px; opacity:0 } \r\n    to { bottom:0px; opacity:1 }\r\n  }\r\n  \r\n  @keyframes animatebottom { \r\n    from{ bottom:-100px; opacity:0 } \r\n    to{ bottom:0; opacity:1 }\r\n  }\r\n#content{\r\n    display: none;\r\n    text-align: center;\r\n}\r\n.skip-link {\r\n   position: absolute;\r\n   top: -75px;\r\n   left: 0;\r\n   text-decoration: none;\r\n   background-color: #bf1722;\r\n   color: white;\r\n   padding: 8px;\r\n   z-index: 100;\r\n}\r\n.skip-link:focus{\r\n    top:75px;\r\n}\r\nmain {\r\n    padding: 32px;\r\n    flex: 1;\r\n}\r\n.content {\r\n    margin: 0 auto;\r\n    min-height: 100%;\r\n}\r\n\r\n.content .content__heading {\r\n    font-weight: normal;\r\n}\r\n.app-bar {\r\n    padding: 8px 16px;\r\n    background-color:  #2c3e50;\r\n    display: grid;\r\n    grid-template-columns: auto 1fr auto;\r\n    gap: 10px;\r\n    position: sticky;\r\n    top: 0;\r\n    z-index: 99999;\r\n    box-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.2);\r\n}\r\n.app-bar a:fokus, .app-bar a:hover{\r\n    color: var(--nav-text-color-emphasis);\r\n}\r\n.app-bar .app-bar__menu {\r\n    display: flex;\r\n    align-items: center;\r\n}\r\n\r\n.app-bar .app-bar__menu button {\r\n    background-color: transparent;\r\n    color: white;\r\n    border: none;\r\n    font-size: 18px;\r\n    padding: 14px;\r\n    width: 44px;\r\n    height: 44px;\r\n    cursor: pointer;\r\n}\r\n\r\n.app-bar .app-bar__brand {\r\n    display: flex;\r\n    align-items: center;\r\n}\r\n\r\n.app-bar .app-bar__brand h1 {\r\n    color: #db0000;\r\n    text-transform: uppercase;\r\n    font-size: 18px;\r\n    user-select: none;\r\n}\r\n.app-bar .app-bar__brand img {\r\n    display: block;\r\n}\r\n\r\n.app-bar .app-bar__navigation {\r\n    position: absolute;\r\n    top: 50px;\r\n    left: -180px;\r\n    width: 150px;\r\n    transition: all 0.3s;\r\n    padding: 8px;\r\n    background-color:  #2c3e50;\r\n    overflow: hidden;\r\n}\r\n\r\n.app-bar .app-bar__navigation.open {\r\n    left: 0;\r\n}\r\n\r\n.app-bar .app-bar__navigation ul li a {\r\n    display: inline-block;\r\n    text-decoration: none;\r\n    color: white;\r\n    padding: 10px;\r\n    margin-bottom: 5px;\r\n    width: 100%;\r\n}\r\n.app-bar .app-bar__navigation ul li a:hover {\r\n    color: white;\r\n    background-color: blueviolet;\r\n}\r\n\r\n/*\r\n * latest\r\n */\r\n\r\n.latest {\r\n    align-content: center;\r\n    width: 100%;\r\n    margin: auto;\r\n    text-align: center;\r\n}\r\n\r\n.latest__label {\r\n    font-size: 32px;\r\n    font-weight: lighter;\r\n}\r\n\r\n.latest__label::after {\r\n    content: '';\r\n    margin-top: 16px;\r\n    display: block;\r\n    border-bottom: 1px solid #eeeeee;\r\n}\r\n\r\n/*\r\n * restaurants\r\n */\r\n\r\n.restaurants {\r\n    display: grid;\r\n    grid-template-columns: 1fr;\r\n    gap: 16px;\r\n    margin: 32px 0;\r\n}\r\n/*\r\n * restaurant item\r\n */\r\n.restaurant-item {\r\n    width: 100%;\r\n    box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);\r\n    border-radius: 8px;\r\n    overflow: hidden;\r\n}\r\n\r\n.restaurant-item__header {\r\n    position: relative;\r\n}\r\n\r\n.restaurant-item .restaurant-item__header .restaurant-item__header__poster {\r\n    height: 200px;\r\n    width: 100%;\r\n}\r\n\r\n.restaurant-item .restaurant-item__header .restaurant-item__header__rating {\r\n    position: absolute;\r\n    padding: 8px;\r\n    bottom: 20px;\r\n    left: 0;\r\n    display: inline-block;\r\n    background-color: black;\r\n    color: white;\r\n}\r\n\r\n.restaurant-item .restaurant-item__header .restaurant-item__header__rating .restaurant-item__header__rating__score {\r\n    margin-left: 10px;\r\n}\r\n\r\n.restaurant-item .restaurant-item__header .restaurant-item__header__city {\r\n    position: absolute;\r\n    padding: 8px;\r\n    bottom: 20px;\r\n    right: 0;\r\n    display: inline-block;\r\n    background-color: black;\r\n    color: white;\r\n}\r\n.restaurant-item .restaurant-item__content {\r\n    padding: 16px;\r\n}\r\n\r\n.restaurant-item .restaurant-item__content h3 {\r\n    margin: 0 0 10px 0;\r\n}\r\n\r\n.restaurant-item .restaurant-item__content h3 a {\r\n    color: #db0000;\r\n    text-decoration: none;\r\n}\r\n\r\n.restaurant-item .restaurant-item__content p {\r\n    overflow: hidden;\r\n    text-overflow: ellipsis;\r\n    display: -webkit-box;\r\n    -webkit-line-clamp: 4;\r\n    /* number of lines to show */\r\n    -webkit-box-orient: vertical;\r\n}\r\n\r\n.restaurant {\r\n    margin: 0 auto;\r\n    width: 100%;\r\n    max-width: 800px;\r\n    display: grid;\r\n    grid-template-columns: 1fr;\r\n    gap: 18px 16px;\r\n}\r\n\r\n.restaurant .restaurant__poster {\r\n    width: 100%;\r\n}\r\n\r\n.restaurant .restaurant__info h4 {\r\n    margin: 8px 0;\r\n}\r\n.restaurant .restaurant__food {\r\n   display: flex;\r\n   align-items: center;\r\n   justify-content: center;\r\n   flex-flow: column wrap;\r\n   align-content: stretch;\r\n}\r\n.restaurant .restaurant__drink {\r\n    display: flex;\r\n    flex-direction: row;\r\n}\r\n.row {\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n}\r\n.column {\r\n    flex: 50%;\r\n    padding: 20px;\r\n}\r\nbutton.back{\r\n    display: flex;\r\n    flex:10%;\r\n    align-content: flex-start;\r\n    width: fit-content;\r\n    padding: 18px;\r\n    cursor: pointer;\r\n    background-color: #2c3e50;\r\n    color: white;\r\n}\r\nbutton.open{\r\n    display: flex;\r\n    flex:10%;\r\n    align-content: center;\r\n    width: fit-content;\r\n    padding: 10px;\r\n    cursor: pointer;\r\n    background-color: #2c3e50;\r\n    color: white;\r\n}\r\n.like {\r\n    font-size: 18px;\r\n    position: fixed;\r\n    bottom: 16px;\r\n    right: 16px;\r\n    background-color: #db0000;\r\n    color: white;\r\n    border: 0;\r\n    border-radius: 50%;\r\n    width: 55px;\r\n    height: 55px;\r\n    cursor: pointer;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n}\r\n.restaurant-detail{\r\n    position: relative;\r\n    text-align: center;\r\n}\r\n.restaurant-detail img {\r\n    width: 100%;\r\n}\r\n.restaurant-detail .title{\r\n    position: absolute;\r\n    top: 20px;\r\n    left: 25%;\r\n    right: 25%;\r\n    background-color: red;\r\n    opacity: 0.7;\r\n    width: auto;\r\n    height: auto;\r\n    color: #f3f3f3;\r\n    box-shadow: #3498db;\r\n    padding: 10px 0;\r\n}\r\n.restaurant-detail .title h1{\r\n    font-size: large;\r\n    font-family: Impact, Haettenschweiler, 'Arial Narrow Bold', sans-serif;\r\n}\r\n.restaurant-detail .rating{\r\n    position: absolute;\r\n    padding: 8px;\r\n    top: 20px;\r\n    left: 0;\r\n    display: inline-block;\r\n    background-color: red;\r\n    color: white;\r\n}\r\n.restaurant-detail .tag{\r\n    position: absolute;\r\n    padding: 8px;\r\n    top: 20px;\r\n    right: 0;\r\n    display: inline-block;\r\n    background-color: red;\r\n    color: white;\r\n}\r\n.restaurant-detail .fooddrink{\r\n    position: absolute;\r\n    padding: 8px;\r\n    bottom: 20px;\r\n    left: 0;\r\n    right: 0;\r\n    display: inline-block;\r\n    background-color: black;\r\n    color: white;\r\n    opacity: 0.8;\r\n}\r\n.restaurant-detail .drink{\r\n    position: absolute;\r\n    padding: 8px;\r\n    bottom: 20px;\r\n    right: 0;\r\n    display: inline-block;\r\n    background-color: greenyellow;\r\n    color: white;\r\n}\r\n/*\r\n * footer\r\n */\r\n\r\n\r\nfooter {\r\n    background-color: #2c3e50;\r\n    padding: 2em;\r\n    width: 100%;\r\n    text-align: center;\r\n}\r\n\r\nfooter ul {\r\n    margin: 0 auto;\r\n    display: inline-block;\r\n}\r\n\r\nfooter li {\r\n    display: inline-block;\r\n    margin: 0 1em;\r\n    font-size: 14px;\r\n}\r\n\r\nfooter p.footer {\r\n    display: inline-block;\r\n    padding: 1.3em;\r\n    text-decoration: none;\r\n    color: #fff\r\n}\r\n\r\n  .feedback-input {\r\n    color:rgb(0, 0, 0);\r\n    font-family: Helvetica, Arial, sans-serif;\r\n    font-weight:500;\r\n    font-size: 18px;\r\n    border-radius: 5px;\r\n    line-height: 22px;\r\n    background-color: transparent;\r\n    border:2px solid #CC6666;\r\n    transition: all 0.3s;\r\n    padding: 13px;\r\n    margin-bottom: 15px;\r\n    width:100%;\r\n    box-sizing: border-box;\r\n    outline:0;\r\n  }\r\n  \r\n  .feedback-input:focus { border:2px solid #CC4949; }\r\n  \r\n  textarea {\r\n    height: 150px;\r\n    line-height: 150%;\r\n    resize:vertical;\r\n  }\r\n  \r\n  [type=\"button\"] {\r\n    font-family: 'Montserrat', Arial, Helvetica, sans-serif;\r\n    width: 100%;\r\n    background:#CC6666;\r\n    border-radius:5px;\r\n    border:0;\r\n    cursor:pointer;\r\n    color:black;\r\n    font-size:24px;\r\n    padding-top:10px;\r\n    padding-bottom:10px;\r\n    transition: all 0.3s;\r\n    margin-top:-4px;\r\n    font-weight:700;\r\n  }\r\n  [type=\"button\"]:hover { background:#CC4949; }",""]),n.exports=r},function(n,r,t){var e=t(0),o=t(7);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[n.i,o,""]]);var a={insert:"head",singleton:!1};e(o,a);n.exports=o.locals||{}},function(n,r,t){(r=t(1)(!1)).push([n.i,".posts {\r\n    display: grid;\r\n    grid-row-gap: 16px;\r\n}\r\n@media screen and (max-width: 600px) {\r\n    .row {\r\n        flex-direction: column;\r\n    }\r\n}\r\n@media screen and (min-width: 650px) {\r\n    .posts {\r\n        display: grid;\r\n        grid-template-columns: 1fr 1fr;\r\n        grid-column-gap: 10px;\r\n        grid-row-gap: 16px;\r\n    }\r\n    .app-bar {\r\n        grid-template-columns: 1fr auto;\r\n        padding: 8px 32px;\r\n    }\r\n\r\n    .app-bar .app-bar__brand h1 {\r\n        font-size: 1.5em;\r\n    }\r\n\r\n    .app-bar .app-bar__menu {\r\n        display: none;\r\n    }\r\n\r\n    .app-bar .app-bar__navigation {\r\n        position: static;\r\n        width: 100%;\r\n    }\r\n\r\n    .app-bar .app-bar__navigation ul li {\r\n        display: inline-block;\r\n    }\r\n\r\n    .app-bar .app-bar__navigation ul li a {\r\n        display: inline-block;\r\n        width: 120px;\r\n        text-align: center;\r\n        margin: 0;\r\n    }\r\n}\r\n\r\n@media screen and (min-width: 900px) {\r\n    .headline {\r\n        display: grid;\r\n        grid-template-columns: 1fr 1fr;\r\n    }\r\n\r\n    .posts {\r\n        display: grid;\r\n        grid-template-columns: 1fr 1fr 1fr;\r\n    }\r\n    .hide-large{display:none!important}\r\n}\r\n\r\n@media screen and (min-width: 1200px) {\r\n    main {\r\n        max-width: 3440px;\r\n\r\n    }\r\n     .posts {\r\n        display: grid;\r\n        grid-template-columns: 1fr 1fr 1fr 1fr;\r\n    }\r\n    \r\n}",""]),n.exports=r},function(n,r,t){"use strict";t.r(r);t(2),t(4),t(6);var e=t.p+"bebba89a21e0100979ebceaa750c86cd.webp";function o(n){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n})(n)}function a(n,r){for(var t=0;t<r.length;t++){var e=r[t];e.enumerable=e.enumerable||!1,e.configurable=!0,"value"in e&&(e.writable=!0),Object.defineProperty(n,e.key,e)}}function i(n,r){return!r||"object"!==o(r)&&"function"!=typeof r?function(n){if(void 0===n)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return n}(n):r}function c(n){var r="function"==typeof Map?new Map:void 0;return(c=function(n){if(null===n||(t=n,-1===Function.toString.call(t).indexOf("[native code]")))return n;var t;if("function"!=typeof n)throw new TypeError("Super expression must either be null or a function");if(void 0!==r){if(r.has(n))return r.get(n);r.set(n,e)}function e(){return u(n,arguments,p(this).constructor)}return e.prototype=Object.create(n.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),l(e,n)})(n)}function u(n,r,t){return(u=s()?Reflect.construct:function(n,r,t){var e=[null];e.push.apply(e,r);var o=new(Function.bind.apply(n,e));return t&&l(o,t.prototype),o}).apply(null,arguments)}function s(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(n){return!1}}function l(n,r){return(l=Object.setPrototypeOf||function(n,r){return n.__proto__=r,n})(n,r)}function p(n){return(p=Object.setPrototypeOf?Object.getPrototypeOf:function(n){return n.__proto__||Object.getPrototypeOf(n)})(n)}var f=function(n){!function(n,r){if("function"!=typeof r&&null!==r)throw new TypeError("Super expression must either be null or a function");n.prototype=Object.create(r&&r.prototype,{constructor:{value:n,writable:!0,configurable:!0}}),r&&l(n,r)}(d,n);var r,t,o,c,u,f=(r=d,t=s(),function(){var n,e=p(r);if(t){var o=p(this).constructor;n=Reflect.construct(e,arguments,o)}else n=e.apply(this,arguments);return i(this,n)});function d(){var n;return function(n,r){if(!(n instanceof r))throw new TypeError("Cannot call a class as a function")}(this,d),(n=f.call(this)).shadowDOM=n.attachShadow({mode:"open"}),n}return o=d,(c=[{key:"connectedCallback",value:function(){this.render()}},{key:"render",value:function(){this.shadowDOM.innerHTML="\n<style>\n@import url('https://fonts.googleapis.com/css2?family=Pacifico&display=swap');\n.hero {\n    display: flex;\n    align-items: center;\n    padding-top:80px;\n    min-height: 360px;\n    width: 100%;\n    text-align: center;\n   background-image: url(\"".concat(e,'");\n   background-position: center;\n   background-color: green;\n}\n.hero-inner {\nbackground-color:#fff;\ndisplay:block;\n    margin: 0 auto;\n    max-width: 800px;\n    opacity:0.75;\n}\n\n.hero-title {\n    color: #65a2e4;\n    font-weight: 500;\n    font-size: 36px;\n    font-family: \'Pacifico\', cursive;\n}\n\n.hero-tagline {\n    color: #65a2e4;\n   margin-top: 16px;\n    font-size: 18px;\n    font-weight: 300;\n    font-family: \'Pacifico\', cursive;\n}\n       </style>\n        <div class="hero">\n        \n    <div class="hero-inner">\n        <h1 class="hero-title">Kang Restaurant</h1>\n        <p class="hero-tagline">The Best Cirebon Restaurant</p>\n    </div>\n</div>')}}])&&a(o.prototype,c),u&&a(o,u),d}(c(HTMLElement));customElements.define("element-hero",f);var d={init:function(n){var r=this,t=n.button,e=n.drawer,o=n.content;t.addEventListener("click",(function(n){r._toggleDrawer(n,e)})),o.addEventListener("click",(function(n){r._closeDrawer(n,e)}))},_toggleDrawer:function(n,r){n.stopPropagation(),r.classList.toggle("open")},_closeDrawer:function(n,r){n.stopPropagation(),r.classList.remove("open")}},h={parseActiveUrlWithCombiner:function(){var n=window.location.hash.slice(1).toLowerCase(),r=this._urlSplitter(n);return this._urlCombiner(r)},parseActiveUrlWithoutCombiner:function(){var n=window.location.hash.slice(1).toLowerCase();return this._urlSplitter(n)},_urlSplitter:function(n){var r=n.split("/");return{resource:r[1]||null,id:r[2]||null,verb:r[3]||null}},_urlCombiner:function(n){return(n.resource?"/".concat(n.resource):"/")+(n.id?"/:id":"")+(n.verb?"/".concat(n.verb):"")}},m={KEY:"12345",BASE_URL:"https://dicoding-restaurant-api.el.r.appspot.com/",BASE_IMAGE_URL:"https://dicoding-restaurant-api.el.r.appspot.com/images/medium/",BASE_IMAGE_LARGE_URL:"https://dicoding-restaurant-api.el.r.appspot.com/images/large/",DATABASE_NAME:"kang-restaurant-database",OBJECT_STORE_NAME:"restaurant"},v={HOME:"".concat(m.BASE_URL,"list"),DETAIL:function(n){return"".concat(m.BASE_URL,"detail/").concat(n)},REVIEW:"".concat(m.BASE_URL,"review")};function g(n,r,t,e,o,a,i){try{var c=n[a](i),u=c.value}catch(n){return void t(n)}c.done?r(u):Promise.resolve(u).then(e,o)}function b(n){return function(){var r=this,t=arguments;return new Promise((function(e,o){var a=n.apply(r,t);function i(n){g(a,e,o,i,c,"next",n)}function c(n){g(a,e,o,i,c,"throw",n)}i(void 0)}))}}function y(n,r){for(var t=0;t<r.length;t++){var e=r[t];e.enumerable=e.enumerable||!1,e.configurable=!0,"value"in e&&(e.writable=!0),Object.defineProperty(n,e.key,e)}}var w=function(){function n(){!function(n,r){if(!(n instanceof r))throw new TypeError("Cannot call a class as a function")}(this,n)}var r,t,e,o,a,i;return r=n,t=null,e=[{key:"home",value:(i=b(regeneratorRuntime.mark((function n(){var r,t;return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return n.next=2,fetch(v.HOME);case 2:return r=n.sent,n.next=5,r.json();case 5:return t=n.sent,n.abrupt("return",t.restaurants);case 7:case"end":return n.stop()}}),n)}))),function(){return i.apply(this,arguments)})},{key:"detailRestaurant",value:(a=b(regeneratorRuntime.mark((function n(r){var t,e;return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return n.next=2,fetch(v.DETAIL(r));case 2:return t=n.sent,n.next=5,t.json();case 5:return e=n.sent,n.abrupt("return",e.restaurant);case 7:case"end":return n.stop()}}),n)}))),function(n){return a.apply(this,arguments)})},{key:"review",value:(o=b(regeneratorRuntime.mark((function n(){var r,t,e,o=arguments;return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return r=o.length>0&&void 0!==o[0]?o[0]:{},n.next=3,fetch(v.REVIEW,{method:"POST",headers:{"X-Auth-Token":m.KEY,"Content-Type":"application/json"},body:JSON.stringify(r)});case 3:return t=n.sent,n.next=6,t.json();case 6:if(e=n.sent,console.log(e),console.log(r),"success"!==e.message){n.next=15;break}return window.alert("Berhasil ditambahkan"),window.location.reload(),n.abrupt("return",!0);case 15:return window.alert("Gagal Ditambahkan"),n.abrupt("return",!1);case 17:case"end":return n.stop()}}),n)}))),function(){return o.apply(this,arguments)})}],t&&y(r.prototype,t),e&&y(r,e),n}(),x=function(n,r,t,e,o){return"\n<h1>".concat(n.name," ( ").concat(n.city," )</h1>\n<h6>").concat(n.address,"</h6>\n<div class='restaurant-detail'>\n  <img src=\"").concat(m.BASE_IMAGE_URL+n.pictureId,'" alt="').concat(n.name,"\" style=\"width=100%\">\n  <div class='tag'>\n    <i class='fa fa-tag'></i> ").concat(o,"&middot; <i class='fa fa-tag'></i>\n  </div>\n  <p class='rating'><i class='fa fa-star' style=\"color:yellow\"></i>").concat(n.rating,"</p>\n</div>\n  <div class=\"restaurant__overview\">\n    <h3><i class='fa fa-cutlery'></i> Foods :</h3>\n    <p>\n    ").concat(r," &middot;</p>\n    <h3><i class='fa fa-glass'></i> Drinks :</h3>\n    <p>\n    ").concat(t," &middot;</p>\n    <h3>Deskripsi</h3>\n    <p>").concat(n.description,"</p>\n  </div>\n  <div class=\"restaurant__info\">\n  <h3>Customer Review</h3>\n  </div>\n  <div class='row'>\n    <div class='column'>\n        ").concat(e,"\n    </div>\n    <div class='column'>\n    \n      <input type=\"hidden\" value='").concat(n.id,"'>      \n      <input name=\"name\" type=\"text\" class=\"feedback-input\" id='name' placeholder=\"Name\" />   \n      <textarea name=\"text\" class=\"feedback-input\" id='review' placeholder=\"Comment\"></textarea>\n      <button id='submit' type='button'>Submit</button>\n    \n    </div>\n  </div>\n  <div class='row'>\n    <div class='column'>\n    <button aria-label='back to home' onclick=\"window.location.href='#/'\" class='back'>Back to Home</button>\n    </div>\n  </div>\n</div>\n")},_=function(n){return'\n<article class="restaurant-item">\n    <div class="restaurant-item__header">\n        <img class="restaurant-item__header__poster" alt="'.concat(n.name,'"\n            src="').concat(n.pictureId?m.BASE_IMAGE_URL+n.pictureId:"https://picsum.photos/id/666/800/450?grayscale",'">\n        <div class="restaurant-item__header__rating">\n            <p><i class=\'fa fa-star\' style=\'color:yellow\'></i><span class="restaurant-item__header__rating__score">').concat(n.rating,'</span></p>\n        </div>\n        <div class="restaurant-item__header__city">\n            <p><span class="restaurant-item__header__rating__score">').concat(n.city,'</span>       <i class=\'fa fa-map-marker\'></i></p>\n        </div>\n    </div>\n    <div class="restaurant-item__content">\n        <h3><a href="',"/#/detail/".concat(n.id),'">').concat(n.name,"</a></h3>\n        <p>").concat(n.description,"</p>\n    </div>\n  </article>\n")};function k(n,r,t,e,o,a,i){try{var c=n[a](i),u=c.value}catch(n){return void t(n)}c.done?r(u):Promise.resolve(u).then(e,o)}function E(n){return function(){var r=this,t=arguments;return new Promise((function(e,o){var a=n.apply(r,t);function i(n){k(a,e,o,i,c,"next",n)}function c(n){k(a,e,o,i,c,"throw",n)}i(void 0)}))}}var R,S,L={render:function(){return E(regeneratorRuntime.mark((function n(){return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return n.abrupt("return",'\n    <div class="latest">\n        <h1 class="latest__label">Explore Restaurant</h1>\n        <div class="posts" id="restaurant"></div>\n    </div>\n    ');case 1:case"end":return n.stop()}}),n)})))()},afterRender:function(){return E(regeneratorRuntime.mark((function n(){var r,t;return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return n.next=2,w.home();case 2:r=n.sent,console.log(r),document.querySelector("#hero").style.display="block",t=document.querySelector("#restaurant"),r.forEach((function(n){t.innerHTML+=_(n)}));case 7:case"end":return n.stop()}}),n)})))()}};var O=new WeakMap,j=new WeakMap,P=new WeakMap,B=new WeakMap,A=new WeakMap;var C={get:function(n,r,t){if(n instanceof IDBTransaction){if("done"===r)return j.get(n);if("objectStoreNames"===r)return n.objectStoreNames||P.get(n);if("store"===r)return t.objectStoreNames[1]?void 0:t.objectStore(t.objectStoreNames[0])}return D(n[r])},set:function(n,r,t){return n[r]=t,!0},has:function(n,r){return n instanceof IDBTransaction&&("done"===r||"store"===r)||r in n}};function I(n){return n!==IDBDatabase.prototype.transaction||"objectStoreNames"in IDBTransaction.prototype?(S||(S=[IDBCursor.prototype.advance,IDBCursor.prototype.continue,IDBCursor.prototype.continuePrimaryKey])).includes(n)?function(){for(var r=arguments.length,t=new Array(r),e=0;e<r;e++)t[e]=arguments[e];return n.apply(M(this),t),D(O.get(this))}:function(){for(var r=arguments.length,t=new Array(r),e=0;e<r;e++)t[e]=arguments[e];return D(n.apply(M(this),t))}:function(r){for(var t=arguments.length,e=new Array(t>1?t-1:0),o=1;o<t;o++)e[o-1]=arguments[o];var a=n.call.apply(n,[M(this),r].concat(e));return P.set(a,r.sort?r.sort():[r]),D(a)}}function T(n){return"function"==typeof n?I(n):(n instanceof IDBTransaction&&function(n){if(!j.has(n)){var r=new Promise((function(r,t){var e=function(){n.removeEventListener("complete",o),n.removeEventListener("error",a),n.removeEventListener("abort",a)},o=function(){r(),e()},a=function(){t(n.error||new DOMException("AbortError","AbortError")),e()};n.addEventListener("complete",o),n.addEventListener("error",a),n.addEventListener("abort",a)}));j.set(n,r)}}(n),r=n,(R||(R=[IDBDatabase,IDBObjectStore,IDBIndex,IDBCursor,IDBTransaction])).some((function(n){return r instanceof n}))?new Proxy(n,C):n);var r}function D(n){if(n instanceof IDBRequest)return r=n,(t=new Promise((function(n,t){var e=function(){r.removeEventListener("success",o),r.removeEventListener("error",a)},o=function(){n(D(r.result)),e()},a=function(){t(r.error),e()};r.addEventListener("success",o),r.addEventListener("error",a)}))).then((function(n){n instanceof IDBCursor&&O.set(n,r)})).catch((function(){})),A.set(t,r),t;var r,t;if(B.has(n))return B.get(n);var e=T(n);return e!==n&&(B.set(n,e),A.set(e,n)),e}var M=function(n){return A.get(n)};function N(n,r){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var e=Object.getOwnPropertySymbols(n);r&&(e=e.filter((function(r){return Object.getOwnPropertyDescriptor(n,r).enumerable}))),t.push.apply(t,e)}return t}function U(n){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?N(Object(t),!0).forEach((function(r){q(n,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):N(Object(t)).forEach((function(r){Object.defineProperty(n,r,Object.getOwnPropertyDescriptor(t,r))}))}return n}function q(n,r,t){return r in n?Object.defineProperty(n,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[r]=t,n}function z(n,r,t,e,o,a,i){try{var c=n[a](i),u=c.value}catch(n){return void t(n)}c.done?r(u):Promise.resolve(u).then(e,o)}var H=["get","getKey","getAll","getAllKeys","count"],G=["put","add","delete","clear"],W=new Map;function F(n,r){if(n instanceof IDBDatabase&&!(r in n)&&"string"==typeof r){if(W.get(r))return W.get(r);var t=r.replace(/FromIndex$/,""),e=r!==t,o=G.includes(t);if(t in(e?IDBIndex:IDBObjectStore).prototype&&(o||H.includes(t))){var a=function(){var n,r=(n=regeneratorRuntime.mark((function n(r){var a,i,c,u,s,l,p,f=arguments;return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:for(i=this.transaction(r,o?"readwrite":"readonly"),c=i.store,u=f.length,s=new Array(u>1?u-1:0),l=1;l<u;l++)s[l-1]=f[l];return e&&(c=c.index(s.shift())),n.next=6,(a=c)[t].apply(a,s);case 6:if(p=n.sent,!o){n.next=10;break}return n.next=10,i.done;case 10:return n.abrupt("return",p);case 11:case"end":return n.stop()}}),n,this)})),function(){var r=this,t=arguments;return new Promise((function(e,o){var a=n.apply(r,t);function i(n){z(a,e,o,i,c,"next",n)}function c(n){z(a,e,o,i,c,"throw",n)}i(void 0)}))});return function(n){return r.apply(this,arguments)}}();return W.set(r,a),a}}}function K(n,r,t,e,o,a,i){try{var c=n[a](i),u=c.value}catch(n){return void t(n)}c.done?r(u):Promise.resolve(u).then(e,o)}function J(n){return function(){var r=this,t=arguments;return new Promise((function(e,o){var a=n.apply(r,t);function i(n){K(a,e,o,i,c,"next",n)}function c(n){K(a,e,o,i,c,"throw",n)}i(void 0)}))}}C=function(n){return U(U({},n),{},{get:function(r,t,e){return F(r,t)||n.get(r,t,e)},has:function(r,t){return!!F(r,t)||n.has(r,t)}})}(C);var V=m.OBJECT_STORE_NAME,Y=function(n,r){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},e=t.blocked,o=t.upgrade,a=t.blocking,i=t.terminated,c=indexedDB.open(n,r),u=D(c);return o&&c.addEventListener("upgradeneeded",(function(n){o(D(c.result),n.oldVersion,n.newVersion,D(c.transaction))})),e&&c.addEventListener("blocked",(function(){return e()})),u.then((function(n){i&&n.addEventListener("close",(function(){return i()})),a&&n.addEventListener("versionchange",(function(){return a()}))})).catch((function(){})),u}(m.DATABASE_NAME,m.DATABASE_VERSION,{upgrade:function(n){n.createObjectStore(V,{keyPath:"id"})}}),X={getRestaurant:function(n){return J(regeneratorRuntime.mark((function r(){return regeneratorRuntime.wrap((function(r){for(;;)switch(r.prev=r.next){case 0:return r.next=2,Y;case 2:return r.abrupt("return",r.sent.get(V,n));case 3:case"end":return r.stop()}}),r)})))()},getAllRestaurant:function(){return J(regeneratorRuntime.mark((function n(){return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return n.next=2,Y;case 2:return n.abrupt("return",n.sent.getAll(V));case 3:case"end":return n.stop()}}),n)})))()},putRestaurant:function(n){return J(regeneratorRuntime.mark((function r(){return regeneratorRuntime.wrap((function(r){for(;;)switch(r.prev=r.next){case 0:return r.next=2,Y;case 2:return r.abrupt("return",r.sent.put(V,n));case 3:case"end":return r.stop()}}),r)})))()},deleteRestaurant:function(n){return J(regeneratorRuntime.mark((function r(){return regeneratorRuntime.wrap((function(r){for(;;)switch(r.prev=r.next){case 0:return r.next=2,Y;case 2:return r.abrupt("return",r.sent.delete(V,n));case 3:case"end":return r.stop()}}),r)})))()}};function $(n,r,t,e,o,a,i){try{var c=n[a](i),u=c.value}catch(n){return void t(n)}c.done?r(u):Promise.resolve(u).then(e,o)}function Q(n){return function(){var r=this,t=arguments;return new Promise((function(e,o){var a=n.apply(r,t);function i(n){$(a,e,o,i,c,"next",n)}function c(n){$(a,e,o,i,c,"throw",n)}i(void 0)}))}}function Z(n,r,t,e,o,a,i){try{var c=n[a](i),u=c.value}catch(n){return void t(n)}c.done?r(u):Promise.resolve(u).then(e,o)}function nn(n){return function(){var r=this,t=arguments;return new Promise((function(e,o){var a=n.apply(r,t);function i(n){Z(a,e,o,i,c,"next",n)}function c(n){Z(a,e,o,i,c,"throw",n)}i(void 0)}))}}var rn={init:function(n){var r=this;return nn(regeneratorRuntime.mark((function t(){var e,o;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return e=n.likeButtonContainer,o=n.restaurant,r._likeButtonContainer=e,r._restaurant=o,t.next=5,r._renderButton();case 5:case"end":return t.stop()}}),t)})))()},_renderButton:function(){var n=this;return nn(regeneratorRuntime.mark((function r(){var t;return regeneratorRuntime.wrap((function(r){for(;;)switch(r.prev=r.next){case 0:return t=n._restaurant.id,r.next=3,n._isRestaurantExist(t);case 3:if(!r.sent){r.next=7;break}n._renderLiked(),r.next=8;break;case 7:n._renderLike();case 8:case"end":return r.stop()}}),r)})))()},_isRestaurantExist:function(n){return nn(regeneratorRuntime.mark((function r(){var t;return regeneratorRuntime.wrap((function(r){for(;;)switch(r.prev=r.next){case 0:return r.next=2,X.getRestaurant(n);case 2:return t=r.sent,r.abrupt("return",!!t);case 4:case"end":return r.stop()}}),r)})))()},_renderLiked:function(){var n=this;this._likeButtonContainer.innerHTML='\n  <button aria-label="unlike this restaurant" id="likeButton" class="like">\n    <i class="fa fa-heart" aria-hidden="true"></i>\n  </button>\n',document.querySelector("#likeButton").addEventListener("click",nn(regeneratorRuntime.mark((function r(){return regeneratorRuntime.wrap((function(r){for(;;)switch(r.prev=r.next){case 0:return r.next=2,X.deleteRestaurant(n._restaurant.id);case 2:n._renderButton(),console.log("Unlike");case 4:case"end":return r.stop()}}),r)}))))},_renderLike:function(){var n=this;this._likeButtonContainer.innerHTML='\n  <button aria-label="like this restaurant" id="likeButton" class="like">\n     <i class="fa fa-heart-o" aria-hidden="true"></i>\n  </button>\n',document.querySelector("#likeButton").addEventListener("click",nn(regeneratorRuntime.mark((function r(){return regeneratorRuntime.wrap((function(r){for(;;)switch(r.prev=r.next){case 0:return r.next=2,X.putRestaurant(n._restaurant);case 2:n._renderButton(),console.log("Liked");case 4:case"end":return r.stop()}}),r)}))))}};function tn(n,r,t,e,o,a,i){try{var c=n[a](i),u=c.value}catch(n){return void t(n)}c.done?r(u):Promise.resolve(u).then(e,o)}function en(n){return function(){var r=this,t=arguments;return new Promise((function(e,o){var a=n.apply(r,t);function i(n){tn(a,e,o,i,c,"next",n)}function c(n){tn(a,e,o,i,c,"throw",n)}i(void 0)}))}}var on={"/":L,"/home":L,"/favorite":{render:function(){return Q(regeneratorRuntime.mark((function n(){return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return n.abrupt("return",'\n    <div class="latest">\n        <h1 class="latest__label">Your Favorite Restaurant</h1>\n        <div class="posts" id="restaurant"></div>\n    </div>\n      ');case 1:case"end":return n.stop()}}),n)})))()},afterRender:function(){return Q(regeneratorRuntime.mark((function n(){var r,t;return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return n.next=2,X.getAllRestaurant();case 2:r=n.sent,t=document.querySelector("#restaurant"),document.querySelector("#hero").style.display="none",document.querySelector("#skip").style.display="none",r.forEach((function(n){t.innerHTML+=_(n)}));case 7:case"end":return n.stop()}}),n)})))()}},"/detail/:id":{render:function(){return en(regeneratorRuntime.mark((function n(){return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return n.abrupt("return","\n    <section id='restaurant' class='restaurant'></section>\n    <div id=\"likeButtonContainer\"></div>\n      ");case 1:case"end":return n.stop()}}),n)})))()},afterRender:function(){return en(regeneratorRuntime.mark((function n(){var r,t,e,o,a,i,c;return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return r=h.parseActiveUrlWithoutCombiner(),n.next=3,w.detailRestaurant(r.id);case 3:t=n.sent,console.log(t),document.querySelector("#hero").style.display="none",document.querySelector("#skip").style.display="none",e=document.querySelector("#restaurant"),o="",a="",i="",c="",t.menus.foods.forEach((function(n){o+="&middot; ".concat(n.name," ")})),t.menus.drinks.forEach((function(n){a+="&middot; ".concat(n.name," ")})),t.consumerReviews.forEach((function(n){i+="".concat(n.name," : ").concat(n.review,"<br>")})),t.categories.forEach((function(n){c+="&middot;&nbsp;<u> ".concat(n.name," </u>&nbsp;")})),e.innerHTML=x(t,o,a,i,c),rn.init({likeButtonContainer:document.querySelector("#likeButtonContainer"),restaurant:t}),document.getElementById("submit").addEventListener("click",en(regeneratorRuntime.mark((function n(){var r,e,o;return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return r=document.getElementById("name").value,e=document.getElementById("review").value,n.next=4,w.review({id:t.id,name:r,review:e});case 4:o=n.sent,console.log(o);case 6:case"end":return n.stop()}}),n)}))));case 20:case"end":return n.stop()}}),n)})))()}}};function an(n,r,t,e,o,a,i){try{var c=n[a](i),u=c.value}catch(n){return void t(n)}c.done?r(u):Promise.resolve(u).then(e,o)}function cn(n,r){for(var t=0;t<r.length;t++){var e=r[t];e.enumerable=e.enumerable||!1,e.configurable=!0,"value"in e&&(e.writable=!0),Object.defineProperty(n,e.key,e)}}var un=function(){function n(r){var t=r.button,e=r.drawer,o=r.content;!function(n,r){if(!(n instanceof r))throw new TypeError("Cannot call a class as a function")}(this,n),this._button=t,this._drawer=e,this._content=o,this._initialAppShell()}var r,t,e,o,a;return r=n,(t=[{key:"_initialAppShell",value:function(){d.init({button:this._button,drawer:this._drawer,content:this._content})}},{key:"renderPage",value:(o=regeneratorRuntime.mark((function n(){var r,t;return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return r=h.parseActiveUrlWithCombiner(),t=on[r],n.next=4,t.render();case 4:return this._content.innerHTML=n.sent,n.next=7,t.afterRender();case 7:case"end":return n.stop()}}),n,this)})),a=function(){var n=this,r=arguments;return new Promise((function(t,e){var a=o.apply(n,r);function i(n){an(a,t,e,i,c,"next",n)}function c(n){an(a,t,e,i,c,"throw",n)}i(void 0)}))},function(){return a.apply(this,arguments)})}])&&cn(r.prototype,t),e&&cn(r,e),n}();function sn(n,r,t,e,o,a,i){try{var c=n[a](i),u=c.value}catch(n){return void t(n)}c.done?r(u):Promise.resolve(u).then(e,o)}(function(){var n,r=(n=regeneratorRuntime.mark((function n(){return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:"serviceWorker"in navigator&&window.addEventListener("load",(function(){navigator.serviceWorker.register("/service-worker.js").then((function(n){console.log("SW registered: ",n)})).catch((function(n){console.log("Service worker not supported in this browser")}))}));case 1:case"end":return n.stop()}}),n)})),function(){var r=this,t=arguments;return new Promise((function(e,o){var a=n.apply(r,t);function i(n){sn(a,e,o,i,c,"next",n)}function c(n){sn(a,e,o,i,c,"throw",n)}i(void 0)}))});return function(){return r.apply(this,arguments)}})()();var ln=new un({button:document.querySelector("#hamburgerButton"),drawer:document.querySelector("#navigationDrawer"),content:document.querySelector("#content")});function pn(){setTimeout(fn,3e3)}function fn(){document.getElementById("loader").style.display="none",document.getElementById("content").style.display="block"}window.addEventListener("hashchange",(function(){ln.renderPage(),pn()})),window.addEventListener("load",(function(){ln.renderPage(),pn()}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,